<?xml version="1.0" encoding="UTF-8"?>
<!--
	<H3>TranslationAgent: Lesson C4.</H3>
	Using agent arguments.
	<H4>Explanation</H4>
	In this example it is shown how agents can be supplied
	with argument values via start-up. Arguments need to be
	declared as exported beliefs within the agent.
-->
<agent xmlns="http://jadex.sourceforge.net/jadex-bdi"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-bdi
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="TranslationC4"
	package="jadex.bdi.tutorial">

	<imports>
		<import>java.util.logging.*</import>
		<import>jadex.base.fipa.*</import>
		<import>jadex.commons.*</import>
		<import>jadex.rules.rulesystem.rules.functions.*</import>
	</imports>

	<beliefs>
		<!-- This beliefset contains the english-german dictionary as facts. -->
		<beliefset name="egwords" class="Tuple">
			<fact>new Tuple("milk", "Milch")</fact>
			<fact>new Tuple("cow", "Kuh")</fact>
			<fact>new Tuple("cat", "Katze")</fact>
			<fact>new Tuple("dog", "Hund")</fact>
		</beliefset>
		<!-- This belief stores the number of translation requests already processed. -->
		<belief name="transcnt" class="int" argument="true">
			<fact>0</fact>
		</belief>
	</beliefs>

	<plans>
		<!-- Passive plan for adding words, when a
			request word message is received. -->
		<plan name="addword">
			<body class="EnglishGermanAddWordPlanC3"/>
			<trigger>
				<messageevent ref="request_addword"/>
			</trigger>
		</plan>
		<!-- Passive plan for translating words, when a request
			translation message is received. -->
		<plan name="egtrans">
			<body class="EnglishGermanTranslationPlanC3"/>
			<trigger>
				<messageevent ref="request_translation"/>
			</trigger>
		</plan>
		<!-- Passive plan for printing out a message, whenever the condition
			is satisfied, that it is the 10, 20,... translation request  -->
		<plan name="thankyou">
			<body class="ThankYouPlanC4"/>
			<trigger>
				<condition language="jcl">
					$beliefbase.transcnt>0 &amp;&amp; $beliefbase.transcnt%10==0

					// ?rbelief = (belief (element_has_model ?mbelief) 
					// 	(belief_has_fact ?fact &amp; > 0 &amp; :(== 0 (Modulo ?fact 10))))
					// ?mbelief = (mbelief (melement_has_name "transcnt"))
					//
					// ?mplan = (mplan (melement_has_name "thankyou"))
					// ?rcapa = (capability (capability_has_beliefs contains ?rbelief))
				</condition>
			</trigger>
		</plan>
	</plans>

	<events>
		<!-- Specifies a add word request being all messages with performative
			request and start with a specific string "add english_german". -->
		<messageevent name="request_addword" direction="receive" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<match>$content instanceof String &amp;&amp; ((String)$content).startsWith("add english_german")</match>
		</messageevent>
		<!-- Specifies a translation request being all messages with performative
			request and start with a specific string "translate english_german". -->
		<messageevent name="request_translation" direction="receive" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<match>$content instanceof String &amp;&amp; ((String)$content).startsWith("translate english_german")</match>
		</messageevent>
	</events>

	<expressions>
		<!-- This query selects the first matching entry from the dictionary,
			whereby the parameter $eword is compared to the first element of
			a belief set tuple. -->
		<expression name="query_egword">
			select one $wordpair.get(1)
			from Tuple $wordpair in $beliefbase.getBeliefSet("egwords").getFacts()
			where $wordpair.get(0).equals($eword)
			<!-- <parameter name="$eword" class="String"/> -->
		</expression>
	</expressions>

	<properties>
		<!-- Only log outputs >= level are printed. -->
		<property name="logging.level">Level.INFO</property>
		<!-- The default parent handler prints out log messages on the console. -->
		<property name="logging.useParentHandlers">true</property>
		<!--<property name="debugging">true</property>-->
    </properties>

</agent>

