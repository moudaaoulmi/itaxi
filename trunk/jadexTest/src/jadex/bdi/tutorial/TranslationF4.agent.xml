<?xml version="1.0" encoding="UTF-8"?>
<!--
	<H3>TranslationAgent: Lesson F4.</H3>
	Establishing a multi-agent scenario.
	<H4>Explanation</H4>
	This example shows how a multi-agent scenario can
	be set-up using the DF. It consists of a user agent
	and a translation agent. The user agent offers a
	new service for translating sentences and uses
	therefore a translation agent.
-->
<agent xmlns="http://jadex.sourceforge.net/jadex-bdi"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-bdi
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="TranslationF4"
	package="jadex.bdi.tutorial">

	<imports>
		<import>jadex.planlib.*</import>
		<import>jadex.base.fipa.*</import>
		<import>java.util.logging.*</import>
		<import>jadex.commons.*</import>
		<import>jadex.commons.service.*</import>
	</imports>

	<capabilities>
		<!-- Include the directory facilitator capability under the name dfcap. -->
		<capability name="dfcap" file="jadex.bdi.planlib.df.DF"/>
		<!-- Include the translation capability under the name transcap. -->
		<capability name="transcap" file="jadex.bdi.tutorial.TranslationD1"/>
	</capabilities>

	<goals>
		<!-- Make the keep registered goal available. -->
		<maintaingoalref name="df_keep_registered">
			<concrete ref="dfcap.df_keep_registered"/>
		</maintaingoalref>

		<!-- Make the register goal available. - ->
		<achievegoalref name="df_register">
			<concrete ref="dfcap.df_register"/>
		</achievegoalref>-->

		<!-- Make the deregister goal available. - ->
		<achievegoalref name="df_deregister">
			<concrete ref="dfcap.df_deregister"/>
		</achievegoalref>-->
	</goals>

	<properties>
 		<!-- Only log outputs >= level are printed. -->
		<property name="logging.level">Level.INFO</property>
 		<!-- The default parent handler prints out log messages on the console. -->
		<property name="logging.useParentHandlers">true</property>
		<!--<property name="debugging">true</property>-->
	 	<property name="dfservice" class="IFuture">SServiceProvider.getService($scope.getServiceProvider(), IDF.class)</property>
    </properties>

	<configurations>
		<configuration name="default">
			<goals>
				<initialgoal ref="df_keep_registered">
					<parameter ref="description">
						<value>
							$propertybase.getProperty("dfservice")
								.createDFComponentDescription(null, $propertybase.getProperty("dfservice")
								.createDFServiceDescription("service_translate", "translate english_german", "University of Hamburg"))
 						</value>
					</parameter>
					<parameter ref="leasetime">
						<value>20000</value>
					</parameter>
				</initialgoal>
				 
				<!-- Initial goal to register the agent at startup. - ->
				<initialgoal ref="df_register">
					<parameter ref="description">
						<value>
 							SFipa.createComponentDescription(null,
							SFipa.createServiceDescription("service_translate",
			 				"translate english_german", "University of Hamburg"))
 						</value>
					</parameter>
				</initialgoal>-->
				
				<!-- End goal to deregister the agent at shutdown. - ->
				<endgoal ref="df_deregister"/>-->
			</goals>
		</configuration>
	</configurations>

</agent>
