<?xml version="1.0" encoding="UTF-8"?>
<!--
	<H3>TranslationAgent: Lesson E3.</H3>
	Using a maintain goal.
	<H4>Explanation</H4>
	The agent defines a maintain goal, that monitors
	the number of entries in the dictionary and reduces
	the number of entries whenever the maximum is exceeded.
-->
<agent xmlns="http://jadex.sourceforge.net/jadex-bdi"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-bdi
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="TranslationE3"
	package="jadex.bdi.tutorial">

	<imports>
		<import>java.util.logging.*</import>
		<import>jadex.base.fipa.*</import>
		<import>jadex.commons.*</import>
		<import>jadex.rules.rulesystem.rules.functions.*</import>
	</imports>

	<!-- <capabilities>
		<capability name="transcap" file="TranslationD2"/>
	</capabilities>-->

	<beliefs>
		<!-- This beliefset contains the english-german dictionary as facts. -->
		<beliefset name="egwords" class="Tuple">
			<fact>new Tuple("milk", "Milch")</fact>
			<fact>new Tuple("cow", "Kuh")</fact>
			<fact>new Tuple("cat", "Katze")</fact>
			<fact>new Tuple("dog", "Hund")</fact>
		</beliefset>
	
		<!-- This beliefset contains the english-german dictionary as facts. -->
		<!-- <beliefsetref name="egwords">
			<concrete ref="transcap.egwords" />
		</beliefsetref>-->
		<!-- This belief specifies the maximum number of
			entries in the english-german dictionary. -->
		<belief name="maxstorage" class="int">
			<fact>4</fact>
		</belief>
	</beliefs>

	<goals>
		<!-- Goal type to keep the number of entries in the dictionary
			below some threshold given by the belief maxstorage. -->
		<maintaingoal name="keepstorage" exclude="when_failed">
			<maintaincondition language="jcl">
				$beliefbase.egwords.length &lt;= $beliefbase.maxstorage
			</maintaincondition>
		</maintaingoal>
	</goals>

	<plans>
		<!-- Passive plan for adding words, when a
			request word message is received. -->
		<plan name="addword">
			<body class="EnglishGermanAddWordPlanD2"/>
			<trigger>
				<messageevent ref="request_addword"/>
			</trigger>
		</plan>
	
		<!-- Passive plan for removing a word pair from the dictionary.
 			Reacts on the keep storage goal. -->
		<plan name="remegword">
			<body class="RemoveWordPlanE3"/>
			<trigger>
				<goal ref="keepstorage"/>
			</trigger>
			<precondition>$beliefbase.egwords.length &gt; 0</precondition>
			<!-- <precondition>$beliefbase.getBeliefSet("egwords").size() &gt; 0</precondition> -->
		</plan>
	</plans>
	
	<!-- Added due to missing capa support. -->
	<events>
		<!-- Specifies a add word request being all messages with performative
			request and start with a specific string "add english_german". -->
		<messageevent name="request_addword" direction="receive" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<match>$content instanceof String &amp;&amp; ((String)$content).startsWith("add english_german")</match>
		</messageevent>
		<!-- Specifies a translation request being all messages with performative
			request and start with a specific string "translate english_german". -->
		<messageevent name="request_translation" direction="receive" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<match>$content instanceof String &amp;&amp; ((String)$content).startsWith("translate english_german")</match>
		</messageevent>

		<!-- The answer message after success. -->
		<messageevent name="inform" direction="send" type="fipa" exported="true">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
		</messageevent>
		<!-- The answer message after some error occurred. -->
		<messageevent name="failure" direction="send" type="fipa" exported="true">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.FAILURE</value>
			</parameter>
		</messageevent>
	</events>
	<expressions>
		<!-- This query selects the first matching entry from the dictionary,
			whereby the parameter $eword is compared to the first element of
			a belief set tuple. -->
		<expression name="query_egword">
			select one $wordpair.get(1)
			from Tuple $wordpair in $beliefbase.egwords
			where $wordpair.get(0).equals($eword)
			<!-- <parameter name="$eword" class="String"/> -->
		</expression>
	</expressions>

	<properties>
 		<!-- Only log outputs >= level are printed. -->
       <property name="logging.level">Level.INFO</property>
 		<!-- The default parent handler prints out log messages on the console. -->
       <property name="logging.useParentHandlers">true</property>
    </properties>

	<configurations>
		<configuration name="default">
			<goals>
				<initialgoal ref="keepstorage"/>
			</goals>
		</configuration>
	</configurations>

</agent>

