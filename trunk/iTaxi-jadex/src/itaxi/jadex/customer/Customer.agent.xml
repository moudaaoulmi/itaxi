<?xml version="1.0" encoding="UTF-8"?>
<!-- <H3>Customer!</H3> taxi-o-matic -->
<agent xmlns="http://jadex.sourceforge.net/jadex-bdi" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-bdi
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="Customer" package="itaxi.jadex.customer">

	<imports>
		<import>jadex.commons.*</import>
		<import>jadex.commons.service.*</import>
		<import>jadex.base.fipa.*</import>
		<import>java.util.logging.*</import>
		<import>jadex.planlib.*</import>
		<import>com.google.gson.Gson</import>
		<import>jadex.bridge.IComponentIdentifier</import>
		<import>itaxi.communications.communicator.*</import>
		<import>itaxi.communications.messages.Message</import>
		<import>java.util.Date</import>
	</imports>

	<capabilities>
		<!-- Include the directory facilitator capability under the name dfcap. -->
		<capability name="dfcap" file="jadex.bdi.planlib.df.DF" />
	</capabilities>

	<beliefs>
		<belief name="monitorCom" class="Communicator">
			<fact>null</fact>
		</belief>

		<belief name="latitude" class="int">
			<fact>38736645</fact>
		</belief>

		<belief name="longitude" class="int">
			<fact>-9138608</fact>
		</belief>

		<belief name="emotional_state" class="CustomerState">
			<fact>CustomerState.HAPPY</fact>
		</belief>
		
		<belief name="taxi_call_time" class="Date">
			<fact>null</fact>
		</belief>

	</beliefs>

	<goals>
		<performgoal name="updateEmotionsGoal">
			 <creationcondition language="jcl">
   	 			($beliefbase.emotional_state == CustomerState.HAPPY &amp;&amp;
   	 			$beliefbase.taxi_call_time.getMinutes() - UpdateEmotionsPlan.getDate().getMinutes() > 5) ||
   	 			($beliefbase.emotional_state == CustomerState.IMPACIENT &amp;&amp;
   	 			$beliefbase.taxi_call_time.getMinutes() - UpdateEmotionsPlan.getDate().getMinutes() > 10)
  			</creationcondition>
			
		</performgoal>
	
		<achievegoal name="gotoDestination">
			<parameter name="destinationLatitude" class="int" />
			<parameter name="destinationLongitude" class="int" />
			<targetcondition>
				$beliefbase.latitude == $goal.destinationLatitude
				&amp;&amp;
				$beliefbase.longitude == $goal.destinationLatitude
			</targetcondition>
		</achievegoal>

		<!-- Sub-Goals -->

		<performgoal name="callTaxi" randomselection="true">
			<parameter name="destinationLatitude" class="int" />
			<parameter name="destinationLongitude" class="int" />
		</performgoal>

		<!-- Imported DF-Goals -->

		<!-- Make the keep registered goal available. -->
		<maintaingoalref name="df_keep_registered">
			<concrete ref="dfcap.df_keep_registered" />
		</maintaingoalref>

		<achievegoalref name="df_search">
			<concrete ref="dfcap.df_search" />
		</achievegoalref>

		<achievegoalref name="df_deregister">
			<concrete ref="dfcap.df_deregister" />
		</achievegoalref>

	</goals>

	<plans>
		<plan name="UpdateEmotionsPlan">
			<body class="UpdateEmotionsPlan"></body>
			<trigger>
				<goal ref="updateEmotionsGoal"/>
			</trigger>
		</plan>
	
		<plan name="GotoDestinationPlan">
			<parameter name="destinationLatitude" class="int">
				<goalmapping ref="gotoDestination.destinationLatitude" />
			</parameter>
			<parameter name="destinationLongitude" class="int">
				<goalmapping ref="gotoDestination.destinationLongitude" />
			</parameter>

			<body class="GotoDestinationPlan"></body>

			<trigger>
				<goal ref="gotoDestination">
				</goal>
			</trigger>

		</plan>

		<!-- <plan name="callTaxiCentral"> <parameter name="destinationLatitude" 
			class="int"> <goalmapping ref="callTaxi.destinationLatitude" /> </parameter> 
			<parameter name="destinationLongitude" class="int"> <goalmapping ref="callTaxi.destinationLongitude" 
			/> </parameter> <body class="CallTaxiCentralPlan"> </body> <trigger> <goal 
			ref="callTaxi"> </goal> </trigger> </plan> -->

		<plan name="callTaxiManual">			
			<body class="CallTaxiManualPlan">
			</body>
			<trigger>
				<goal ref="callTaxi">
				</goal>
			</trigger>
		</plan>

		<plan name="die">
			<body class="DiePlan">
			</body>
		</plan>
	</plans>

	<events>
		<internalevent name="taxi_nearby">
			<parameter name="taxi" class="Message" />
		</internalevent>

		<!-- BEGIN callTaxiManual Messages -->
		<messageevent name="request_trip" type="fipa" direction="send">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<parameter name="conversation_id" class="String">
				<value>SFipa.createUniqueId($scope.getAgentName())</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.JADEX_XML</value>
			</parameter>
		</messageevent>

		<messageevent name="agree_trip" type="fipa" direction="receive">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.AGREE</value>
			</parameter>
		</messageevent>
		<!-- END callTaxiManual Messages -->
	</events>

	<properties>
		<!-- Only log outputs >= level are printed. -->
		<property name="logging.level">Level.WARNING</property>
		<!-- The default parent handler prints out log messages on the console. -->
		<property name="logging.useParentHandlers">true</property>
		<!--<property name="debugging">true</property> -->
		<property name="dfservice" class="IFuture">SServiceProvider.getService($scope.getServiceProvider(),IDF.class)
		</property>
	</properties>

	<configurations>
		<configuration name="default">

			<goals>
				<initialgoal ref="gotoDestination">
					<parameter ref="destinationLatitude">
						<value>38736980</value>
					</parameter>
					<parameter ref="destinationLongitude">
						<value>-9138672</value>
					</parameter>
				</initialgoal>

				<initialgoal ref="df_keep_registered">
					<parameter ref="description">
						<value>
							$propertybase.getProperty("dfservice")
							.createDFComponentDescription(null,
							$propertybase.getProperty("dfservice")
							.createDFServiceDescription("customer", "customer", "IST"))
						</value>
					</parameter>
					<parameter ref="leasetime">
						<value>20000</value>
					</parameter>
				</initialgoal>

				<!-- End goal to deregister the agent at shutdown. -->
				<endgoal ref="df_deregister" />
			</goals>

			<!-- fazer plano com sub-goals gotoDestination - lista de destinos -->
			<plans>

				<endplan ref="die" />
			</plans>


		</configuration>
	</configurations>

</agent>

