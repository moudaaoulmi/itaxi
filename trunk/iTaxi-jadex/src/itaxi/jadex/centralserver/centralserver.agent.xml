<?xml version="1.0" encoding="UTF-8"?>
<agent xmlns="http://jadex.sourceforge.net/jadex-bdi" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-bdi
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="CentralServer" package="itaxi.jadex.centralserver">
 
	<imports>
		<import>jadex.commons.*</import>
		<import>jadex.commons.service.*</import>
		<import>jadex.base.fipa.*</import>
		<import>jadex.planlib.*</import>
		<import>java.util.logging.*</import>
		<import>itaxi.communications.communicator.Communicator</import>
		<import>jadex.bridge.IComponentIdentifier</import>
		<import>jadex.bdi.planlib.protocols.ParticipantProposal</import>
		<import>jadex.bdi.planlib.protocols.NegotiationRecord</import>
		<import>itaxi.messages.entities.Party</import>
		<import>itaxi.messages.coordinates.Coordinates</import>
	</imports> 

	<capabilities>
		<!-- Include the directory facilitator capability under the name dfcap. -->
		<capability name="dfcap" file="jadex.bdi.planlib.df.DF" />
		<capability name="procap" file="jadex.bdi.planlib.protocols.contractnet.ContractNet"/>
	</capabilities>

	<beliefs>
	<!--	<belief name="monitorCom" class="Communicator" >
			<fact>null</fact>
		</belief>-->
		
	</beliefs>
	
	<goals>
	
		<performgoal name="getTaxisGoal">
			<parameter name="taxis" class="IComponentIdentifier[]" direction="out"/>
		</performgoal>
		
		<performgoal name="assignParty">
			<parameter name="party" class="Party" direction="in"/>
		</performgoal>
		

		<!-- Imported DF-Goals -->

		<!-- Make the keep registered goal available. -->
		<maintaingoalref name="df_keep_registered">
			<concrete ref="dfcap.df_keep_registered" />
		</maintaingoalref>

		<achievegoalref name="df_search">
			<concrete ref="dfcap.df_search"/>
		</achievegoalref>
		
		<achievegoalref name="df_deregister">
			<concrete ref="dfcap.df_deregister"/>
		</achievegoalref>
		
		
		<!-- Contract Network Goals -->
		 <achievegoalref name="cnp_initiate">
        	<concrete ref="procap.cnp_initiate"/>
    	 </achievegoalref>
    	 <querygoalref name="cnp_evaluate_proposals">
        	<concrete ref="procap.cnp_evaluate_proposals"/>
    	 </querygoalref>	
	</goals>

	<plans>
	
		<plan name="assignPartyPlan">
			<parameter name="party" class="Party">
				<!--  goalmapping ref="assignParty.party"/-->
				<messageeventmapping ref="requestTaxi.content"/>
			</parameter>
			<body class="AssignPartyPlan"/>
			<trigger>
				<messageevent ref="requestTaxi"/>
				<!-- goal ref="assignParty"/-->
			</trigger>
		</plan>
	
		<plan name="getTaxisPlan">
			<parameter name="taxis" class="IComponentIdentifier[]" direction="out">
				<goalmapping ref="getTaxisGoal.taxis"/>
			</parameter>
			<body class="GetTaxisPlan"></body>
			<trigger>
				<goal ref="getTaxisGoal">
				</goal>
			</trigger>
		</plan>
		
		<plan name="die">
			<body class="DiePlan">
			</body>
		</plan>
		
		<!-- Contract Network Plans -->
		
		<plan name="evaluateProposalsPlan">
	        <parameter name="cfp" class="Object">
	            <goalmapping ref="cnp_evaluate_proposals.cfp"/>
	        </parameter>
	        <parameter name="cfp_info" class="Object" direction="inout" optional="true">
	            <goalmapping ref="cnp_evaluate_proposals.cfp_info"/>
	        </parameter>
	        <parameterset name="proposals" class="ParticipantProposal">
	            <goalmapping ref="cnp_evaluate_proposals.proposals"/>
	        </parameterset>
	        <parameterset name="history" class="NegotiationRecord" optional="true">
	            <goalmapping ref="cnp_evaluate_proposals.history"/>
	        </parameterset>
	        <parameterset name="acceptables" class="ParticipantProposal" direction="out">
	            <goalmapping ref="cnp_evaluate_proposals.acceptables"/>
	        </parameterset>
	        <body class="EvaluateProposalsPlan">
			</body>
	        <trigger>
	            <goal ref="cnp_evaluate_proposals"/>
	        </trigger>
    </plan>
		
		
	</plans>
	
	<events>
		<messageevent name="requestTaxi" type="fipa" direction="receive">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.JADEX_XML</value>
			</parameter>
			<!-- <match>$content instanceof Party
				&amp;&amp;
				$sender.getName().startsWith("Customer")
			</match> -->
		</messageevent>
	</events>
  
	<properties>
		<!-- Only log outputs >= level are printed. -->
		<property name="logging.level">Level.INFO</property>
		<!-- The default parent handler prints out log messages on the console. -->
		<property name="logging.useParentHandlers">true</property>
		<!--<property name="debugging">true</property> -->
		<property name="dfservice" class="IFuture">SServiceProvider.getService($scope.getServiceProvider(),IDF.class)</property>
	</properties>
 
	<configurations>
		<configuration name="default">
			<goals>
				<initialgoal ref="df_keep_registered">
					<parameter ref="description">
						<value>
							$propertybase.getProperty("dfservice")
							.createDFComponentDescription(null, $propertybase.getProperty("dfservice")
							.createDFServiceDescription("service_taxiCentral", "taxiCentral", "IST"))
 						</value>
					</parameter>
					<parameter ref="leasetime">
						<value>20000</value>
					</parameter>
				</initialgoal>
				
				<!--  TEST: delete -->
				<!-- initialgoal ref="assignParty">
					<parameter ref="party">
						<value>
							new Party("party",2,new Coordinates(10000,1000), new Coordinates(10000,1000), null)
 						</value>
					</parameter>
				</initialgoal>
 				-->

				<!-- End goal to deregister the agent at shutdown. -->
				<endgoal ref="df_deregister" />
			</goals>
			
			<plans>
				<!--  initialplan ref="getTaxis" /-->
				<endplan ref="die" />
			</plans>
		</configuration>
	</configurations>

</agent>

