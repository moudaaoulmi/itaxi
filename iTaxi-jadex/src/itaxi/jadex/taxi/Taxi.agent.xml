<?xml version="1.0" encoding="UTF-8"?>
<!-- <H3>Taxi!</H3> taxi-o-matic -->
<agent xmlns="http://jadex.sourceforge.net/jadex-bdi" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-bdi
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="Taxi" package="itaxi.jadex.taxi">

	<imports>
		<import>jadex.commons.*</import>
		<import>jadex.commons.service.*</import>
		<import>jadex.base.fipa.*</import>
		<import>java.util.logging.*</import>
		<import>jadex.planlib.*</import>
		<import>com.google.gson.Gson</import>
		<import>itaxi.communications.communicator.Communicator</import>
		<import>itaxi.messages.entities.Party</import>
		<import>jadex.commons.IFilter</import>
		<import>itaxi.messages.entities.PartyBid</import>
	</imports>

	<capabilities>
		<!-- Include the directory facilitator capability under the name dfcap. -->
		<capability name="dfcap" file="jadex.bdi.planlib.df.DF" />
		<capability name="procap" file="jadex.bdi.planlib.protocols.contractnet.ContractNet"/>
	</capabilities>

	<beliefs>	
		<belief name="monitorCom" class="Communicator">
			<fact>null</fact>
		</belief>

		<belief name="latitude" class="int">
			<fact>38741499</fact>
		</belief>

		<belief name="longitude" class="int">
			<fact>-9144959</fact>
		</belief>

		<!-- for now, step in meters for each recurdelay in the move sub-goal -->
		<belief name="velocity" class="int">
			<fact>100</fact>
		</belief>

		<belief name="gas" class="int">
			<fact>100</fact>
		</belief>

		<belief name="maxgas" class="int">
			<fact>100</fact>
		</belief>
		
		<!-- Contract network beliefs -->
		<beliefref name="cnp_filter">
        	<concrete ref="procap.cnp_filter"/>
        </beliefref>

		<belief name="party_capacity" class="int">
			<fact>4</fact>
		</belief>

		<belief name="customerAccepted" class="Party">
			<fact>null</fact>
		</belief>

	</beliefs>

	<goals>
		<performgoal name="serviceCustomer" recur="true"> <!-- recur="true"> -->
		</performgoal>

		<!-- Sub-Goals -->
		<achievegoal name="findCustomer" retry="true" exclude="never">
			<targetcondition>
				$beliefbase.customerAccepted != null
			</targetcondition>
		</achievegoal>

		<achievegoal name="move" recur="true" recurdelay="1000">
			<parameter name="goalLatitude" class="int" />
			<parameter name="goalLongitude" class="int" />
			<targetcondition>
				$beliefbase.latitude == $goal.goalLatitude
				&amp;&amp;
				$beliefbase.longitude == $goal.goalLongitude
			</targetcondition>
		</achievegoal>

		<!-- Imported DF-Goals -->

		<!-- Make the keep registered goal available. -->
		<maintaingoalref name="df_keep_registered">
			<concrete ref="dfcap.df_keep_registered" />
		</maintaingoalref>

		<achievegoalref name="df_search">
			<concrete ref="dfcap.df_search" />
		</achievegoalref>

		<achievegoalref name="df_deregister">
			<concrete ref="dfcap.df_deregister" />
		</achievegoalref>
		
		
		<achievegoal name="bidForParty" recur="true" recurdelay="10000000">
			<parameter name="party" class="Party"/>
		</achievegoal>
		
		
		<!--  Contract network goals -->
		
		<querygoalref name="cnp_make_proposal">
			<concrete ref="procap.cnp_make_proposal"/>
		</querygoalref>
		
		<achievegoalref name="cnp_execute_task">
			<concrete ref="procap.cnp_execute_task"/>
		</achievegoalref>
		
		

	</goals>

	<plans>
		<plan name="ServiceCustomerPlan">
			<body class="ServiceCustomerPlan">
			</body>
			<trigger>
				<goal ref="serviceCustomer">
				</goal>
			</trigger>
		</plan>

		<!-- Receives requests from nearby customers and agrees/refuses the service -->
		<plan name="ReceiveRequestPlan">
			<body class="ReceiveRequestPlan">
			</body>
			<trigger>
				<messageevent ref="request_trip" />
			</trigger>
		</plan>

		<plan name="freeroam" priority="-1">
			<body class="FreeRoamPlan" />
			<trigger>
				<goal ref="findCustomer">
				</goal>
			</trigger>
		</plan>

		<plan name="submoveto">
			<parameter name="goalLatitude" class="int">
				<goalmapping ref="move.goalLatitude" />
			</parameter>
			<parameter name="goalLongitude" class="int">
				<goalmapping ref="move.goalLongitude" />
			</parameter>

			<body class="SubMoveToPlan">
			</body>

			<trigger>
				<goal ref="move">
				</goal>
			</trigger>
		</plan>

		<plan name="die">
			<body class="DiePlan">
			</body>
		</plan>
		
		
		<!--  Contract network goals -->
		
		<plan name="make_proposal">
			<parameter name="cfp" class="Object">
				<goalmapping ref="cnp_make_proposal.cfp"/>
			</parameter>
			<parameter name="proposal" class="Object" direction="out">
				<goalmapping ref="cnp_make_proposal.proposal"/>
			</parameter>
			<parameter name="proposal_info" class="PartyBid" direction="out">
				<goalmapping ref="cnp_make_proposal.proposal_info"/>
			</parameter>

			<body class="MakeProposalPlan"/>
			<trigger>
				<goal ref="cnp_make_proposal"/>
			</trigger>
		</plan>
		
		<plan name="execute_order">
			<parameter name="proposal" class="Object">
				<goalmapping ref="cnp_execute_task.proposal"/>
			</parameter>
			<parameter name="proposal_info" class="Object">
				<goalmapping ref="cnp_execute_task.proposal_info"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="cnp_execute_task.result"/>
			</parameter>
			<body class="PickPartyPlan"/>
			<trigger>
				<goal ref="cnp_execute_task"/>
			</trigger>
		</plan>
		
	</plans>

	<events>
		<messageevent name="request_trip" type="fipa" direction="receive">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<match>$content instanceof Party
				&amp;&amp;
				$sender.getName().startsWith("Customer")
			</match>
		</messageevent>

		<messageevent name="agree_trip" type="fipa" direction="send">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.AGREE</value>
			</parameter>
		</messageevent>
		<messageevent name="refuse_trip" type="fipa" direction="send">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REFUSE</value>
			</parameter>
		</messageevent>

		<messageevent name="reached_destination" type="fipa" direction="send">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
		</messageevent>
	</events>

	<properties>
		<!-- Only log outputs >= level are printed. -->
		<property name="logging.level">Level.INFO</property>
		<!-- The default parent handler prints out log messages on the console. -->
		<property name="logging.useParentHandlers">true</property>
		<!--<property name="debugging">true</property> -->
		<property name="dfservice" class="IFuture">SServiceProvider.getService($scope.getServiceProvider(),IDF.class)
		</property>
	</properties>

	<configurations>
		<configuration name="default">

			<goals>
				<initialgoal ref="df_keep_registered">
					<parameter ref="description">
						<value>
							$propertybase.getProperty("dfservice")
							.createDFComponentDescription(null,
							$propertybase.getProperty("dfservice")
							.createDFServiceDescription("service_taxi", "taxi", "IST"))
						</value>
					</parameter>
					<parameter ref="leasetime">
						<value>20000</value>
					</parameter>
				</initialgoal>

				<initialgoal ref="serviceCustomer">
				</initialgoal>

				<!-- End goal to deregister the agent at shutdown. -->
				<endgoal ref="df_deregister" />
			</goals>

			<plans>
				<endplan ref="die" />
			</plans>
		</configuration>
	</configurations>

</agent>

